import re
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from data_files.create_bot import bot, dp
from handlers.state_classes import FSMMain
from keyboards import kb_button as kb
from building_data.output_data import OutputData


@dp.message_handler(lambda msg: msg.text.lower() in ["—Å—Ç–∞—Ä—Ç", "start", "/start"],
                    content_types=["text"], state="*")
async def command_start(message: types.Message, state: FSMContext):
    await message.delete()
    await state.reset_data()
    await bot.send_message(message.from_user.id,
                           text="–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏! üëã\n\n"
                                "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ "
                                "–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É –≤–∞—Å –¥–æ–º—É.\n"
                                "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–µ 3-4 –±—É–∫–≤—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.\n\n"
                                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Ä–µ—Ç—Å—è —Å —Å–∞–π—Ç–æ–≤:\n"
                                "<a href='https://flatinfo.ru/'>FlatInfo</a>, "
                                "<a href='https://dom.mingkh.ru/'>–î–û–ú.–ú–ò–ù–ñ–ö–•</a>, "
                                "<a href='https://dom.mos.ru/Home'>–î–æ–º–∞ –ú–æ—Å–∫–≤—ã</a>.\n\n"
                                "‚ùóÔ∏è –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ <b>—Å—Ç–∞—Ä—Ç</b> –∏–ª–∏ <b>start</b>.",
                           parse_mode="HTML"
                           )
    await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:")
    await FSMMain.type_address_name.set()


@dp.message_handler(lambda msg: msg.text.lower() in ["üîé –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"],
                    content_types=["text"], state="*")
async def command_start(message: types.Message, state: FSMContext):
    await message.delete()
    await state.reset_data()
    await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:")
    await FSMMain.type_address_name.set()


@dp.message_handler(content_types=["text"], state=FSMMain.type_address_name)
async def get_streen_name(message: types.Message, state: FSMContext):
    if re.search(r'[a-zA-Z]{2,}', message.text):
       await message.reply(text="üö´ I don't understand English. "
                                "Please write me a message completely in Russian.")
    else:
        build_data = OutputData()
        async with state.proxy() as data:
            data["type_address_name"] = message.text
        address = data["type_address_name"]
        addr_data = build_data.get_addr_data(address=address)
        if isinstance(addr_data, list):
            if re.search('–¥–æ–º', addr_data[0]):
                await message.reply(text="‚ùì –£—Ç–æ—á–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å:",
                                reply_markup=kb.get_address_kb(addr_list=addr_data))
            else:
                await message.reply(text="‚ùì –£—Ç–æ—á–Ω–∏—Ç–µ —É–ª–∏—Ü—É:",
                                reply_markup=kb.get_address_kb(addr_list=addr_data))
            await state.reset_data()
        elif isinstance(addr_data, dict):
            # –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –ø—Ä–∏–ª–µ—Ç–µ—Ç—å –æ–±—ä–µ–∫—Ç dict —Å –æ–¥–Ω–∏–º –∞–¥—Ä–µ—Å–æ–º,
            # —Ç–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ –Ω–µ–≥–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å message.text
            # –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ú–∏–Ω–∏–Ω—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫
            address_search = message.text if message.text == addr_data["name"] else addr_data["name"]
            await message.answer(text=f"üîç –ù–∞—á–∞–ª—Å—è —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–º—É –ø–æ –∞–¥—Ä–µ—Å—É - "
                                      f"*{address_search}*", parse_mode='Markdown')
            await message.answer(build_data.get_output_result(addr_data_flainfo=addr_data,
                                                              full_address=address_search),
                                 parse_mode="HTML", reply_markup=kb.kb_start)
            await state.reset_data()
            await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:")
        else:
            await message.reply(text=f"üëÄ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É *{message.text}*.\n",
                                parse_mode="Markdown")
            await state.reset_data()
