import logging
import timeit

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import BadRequest

from logger.get_logs import LoggerForBot
from data_files.create_bot import bot, dp
from keyboards import client_kb as kb, kb_search
from data_files import  useful_tools as ut
from data_files.useful_tools import shipper_list_full_name
from calculation.shippers_calc import TotalTerminalResult
from handlers.state_classes import FSMMain

logger = LoggerForBot()

@dp.message_handler(lambda message: message.text in ['/start', '/help', '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å'],
                    content_types=['text'], state="*")
async def command_start_help_restart(message: types.Message, state=None):
    LoggerForBot().message_logger_info(message)
    await message.delete()
    await state.reset_data()
    await bot.send_message(message.from_user.id,
                           f"–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏! üëã\n\n"
                           f"–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≥—Ä—É–∑–∞ "
                           f"–∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –µ—ë –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏.\n\n"
                           f"–°–µ–π—á–∞—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¢–ö: *{', '.join(shipper_list_full_name)}*.",
                           parse_mode="Markdown",
                           reply_markup=kb.kb_restart)
    await FSMMain.shipment_choice_1.set()
    await bot.send_message(chat_id=message.from_user.id,
                           text="üìç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
                           reply_markup=kb.ikb_shipment_choice_1)


@dp.callback_query_handler(text=["to_address"], state=FSMMain.shipment_choice_1)
async def query_handling_prr(callback:types.CallbackQuery, state: FSMContext):
    logger.callback_logger_warn(callback)
    async with state.proxy() as data:
        data["delivery_derival_variant"] = 'terminal'
        data["delivery_arrival_variant"] = 'address'
    await callback.message.answer(text="üì¶ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–≥—Ä—É–∑–∫–∞ –Ω–∞ –∞–¥—Ä–µ—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏?",
                                 reply_markup=kb.ikb_handling)
    await FSMMain.handling.set()
    await callback.answer()


@dp.callback_query_handler(text=["handling_no", "handling_yes"], state=FSMMain.handling)
async def noactive_shipment_buttons(callback: types.CallbackQuery, state: FSMContext):
    logger.callback_logger_warn(callback)
    # await callback.message.answer(text="üõ† –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üîß‚öôÔ∏è",
    #                               reply_markup=kb.ikb_escape)
    async with state.proxy() as data:
        data["handling"] = 'yes' if callback.data == 'handling_yes' else 'no'
    await callback.message.answer(text=f"üè∞ –ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:",
                                 parse_mode="Markdown")
    await FSMMain.derival_city.set()
    await callback.answer()


@dp.callback_query_handler(text="escape_button", state=FSMMain.shipment_choice_1)
async def escape_choice_shipment_method(callback: types.CallbackQuery):
    logger.callback_logger_warn(callback)
    await callback.message.delete()
    await callback.answer()


@dp.callback_query_handler(text="terminal_terminal", state=FSMMain.shipment_choice_1)
async def type_derival_city_simple_quick_calc(callback: types.CallbackQuery, state: FSMContext):
    logger.callback_logger_info(callback)
    async with state.proxy() as data:
        data["delivery_derival_variant"] = 'terminal'
        data["delivery_arrival_variant"] = 'terminal'
    await callback.message.answer(text=f"üè∞ –ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:",
                                  parse_mode="Markdown")
    await FSMMain.derival_city.set()
    await callback.answer()


@dp.message_handler(content_types=['text'], state=FSMMain.derival_city)
async def query_derival_city(message: types.Message, state: FSMContext):
    logger.message_logger_info(message)
    norm_city_name = ut.change_city_name(message.text)
    if ut.check_cites_on_pop_list(norm_city_name):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö...
        pass
    else:  # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—É–¥–∞
        ut.save_popular_cites(norm_city_name)
    check_derival_city = ut.check_cites_on_pop_list(norm_city_name)
    if check_derival_city:
        if len(check_derival_city) == 1:
            async with state.proxy() as data:
                data["derival_city"] = norm_city_name
                data["derival_city_full_name"] = ''
            await message.answer("üè† –ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
            await FSMMain.arrival_city.set()
        else:
            try:
                await message.reply("–£—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                                    reply_markup=kb_search.get_kb(list(check_derival_city.keys())))
                async with state.proxy() as data:
                    data["check_derival_city"] = check_derival_city
                await FSMMain.check_derival_city.set()
            except BadRequest:
                await message.reply(text=f"üëÄ –ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è *{norm_city_name}*.\n"
                                         f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.",
                                    parse_mode='Markdown')
    else:
        await message.reply(text=f"üëÄ –ì–æ—Ä–æ–¥ *{norm_city_name}* –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ –æ–ø–µ—á–∞—Ç–∫–∞.\n"
                                     f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ–≤ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –Ω–∞–∑–≤–∞–Ω–∏—è.",
                                parse_mode='Markdown')


@dp.message_handler(content_types=["text"], state=FSMMain.check_derival_city)
async def get_check_derival_city(message: types.Message, state: FSMContext):
    logger.message_logger_info(message)
    async with state.proxy() as data:
        check_derival_city = data["check_derival_city"]
    async with state.proxy() as data:
        data["derival_city"] = check_derival_city[message.text]["name"]
        data["derival_city_full_name"] = message.text
    await message.reply(text="–ü—Ä–∏–Ω—è–ª.", reply_markup=kb.kb_restart)
    await message.answer("üè† –ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await FSMMain.arrival_city.set()


@dp.message_handler(content_types=["text"], state=FSMMain.arrival_city)
async def query_arrival_city(message: types.Message, state: FSMContext):
    logger.message_logger_info(message)
    norm_city_name = ut.change_city_name(message.text)
    if ut.check_cites_on_pop_list(norm_city_name):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö...
        pass
    else:  # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—É–¥–∞
        ut.save_popular_cites(norm_city_name)
    check_arrival_city = ut.check_cites_on_pop_list(norm_city_name)
    if check_arrival_city:
        if len(check_arrival_city) == 1:
            async with state.proxy() as data:
                data["arrival_city"] = norm_city_name
                data["arrival_city_full_name"] = ''
            await message.answer("üßÆ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞:",
                                reply_markup=kb.ikb_simple_auto_or_manual)
            await FSMMain.calc_method_choice.set()
        else:
            await message.answer("–£—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                                 reply_markup=kb_search.get_kb(list(check_arrival_city.keys())))
            async with state.proxy() as data:
                data["check_arrival_city"] = check_arrival_city
            await FSMMain.check_arrival_city.set()
    else:
        await message.reply(text=f"üëÄ –ì–æ—Ä–æ–¥ *{norm_city_name}* –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ –æ–ø–µ—á–∞—Ç–∫–∞.\n"
                                 f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ–≤ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –Ω–∞–∑–≤–∞–Ω–∏—è.",
                            parse_mode='Markdown')


@dp.message_handler(content_types=["text"], state=FSMMain.check_arrival_city)
async def get_check_arrival_city(message: types.Message, state: FSMContext):
    logger.message_logger_info(message)
    async with state.proxy() as data:
        check_arrival_city = data["check_arrival_city"]
        data["arrival_city"] = check_arrival_city[message.text]["name"]
        data["arrival_city_full_name"] = message.text
    await message.reply(text="–ü—Ä–∏–Ω—è–ª.", reply_markup=kb.kb_restart)
    # await bot.edit_message_text(chat_id=message.from_user.id,
    #                             text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞:",
    #                             reply_markup=kb.ikb_simple_auto_or_manual)
    await message.answer("üßÆ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞:",
                         reply_markup=kb.ikb_simple_auto_or_manual)
    await FSMMain.calc_method_choice.set()


@dp.callback_query_handler(text="simple_quick_calc", state=FSMMain.calc_method_choice)
async def calc_simple_quick_method(callback: types.CallbackQuery, state: FSMContext):
    logger.callback_logger_info(callback)
    await callback.message.answer(text=f"üîé –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –º–µ–∂–¥—É –¢–ö "
                                       f"*{', '.join(shipper_list_full_name)}*...\n"
                                       f"_(–≤—Ä–µ–º—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ~6.3 —Å–µ–∫.)_",
                                       parse_mode='Markdown')
    async with state.proxy() as data:
        delivery_derival_variant = data["delivery_derival_variant"]
        delivery_arrival_variant = data["delivery_arrival_variant"]
        derival_city_full_name = data["derival_city_full_name"]
        arrival_city_full_name = data["arrival_city_full_name"]
        handling = data["handling"] if data.get("handling") else 'no'
        result_answer = TotalTerminalResult()\
                .get_simple_result(derival_city=data["derival_city"], arrival_city=data["arrival_city"],
                                   derival_city_full_name=derival_city_full_name,
                                   arrival_city_full_name=arrival_city_full_name,
                                   delivery_derival_variant=delivery_derival_variant,
                                   delivery_arrival_variant=delivery_arrival_variant,
                                   handling=handling)

    await callback.message.answer(result_answer, parse_mode="Markdown")
    await callback.answer()

    await state.finish()  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await FSMMain.shipment_choice_1.set()  # –∏ –∑–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ, –∂–¥—ë–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    await callback.message.answer(text="üìç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
                                  reply_markup=kb.ikb_shipment_choice_1)


@dp.callback_query_handler(text="simple_features", state=FSMMain.calc_method_choice)
async def query_choice_quantity(callback: types.CallbackQuery):
    logger.callback_logger_info(callback)
    await callback.message.answer(text="üî¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç?",
                                  reply_markup=kb.ikb_quantity)
    await FSMMain.cargo_choice_quantity.set()
    await callback.answer()



#üö´‚ùóÔ∏èüìçüè∞üèòüöõüööüßÆüîéüî¢üëÄ