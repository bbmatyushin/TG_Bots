from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext  # –¥–ª—è –æ–±—ä—è–≤–ª.–∞–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
from aiogram.dispatcher.filters.state import State, StatesGroup
from import_modules.create_bot import bot, dp

from keyboards.client_kb import ikb_categories, ikb_trend_collect, ikb_popular_collect, \
    ikb_result, kb_client
from import_modules import useful_tools as ut
from pg_database.select_queries import SelectResult


class FSMChoice(StatesGroup):
    choice_category = State()
    tbl_collection = State()
    show_result = State()


async def command_start_help(message: types.Message, state: FSMContext):
    await state.reset_data()
    await bot.send_message(message.from_user.id,
                           f"Hi there {message.from_user.first_name}! üëã\n"
                           f"–ë–æ—Ç —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∏ –ø–æ–ø—É–ª—è–ø–Ω—ã—Ö NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö "
                           f"–Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ *TON*. "
                           f"–° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –º–æ–∂–Ω–æ –æ—Ç—ã—Å–∫–∞—Ç—å –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã "
                           f"–∏–∑ —ç—Ç–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π.\n\n"
                           f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. "
                           f"–ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ *TON* "
                           f"–∏ —É–≤–∏–¥–∏—Ç–µ *–¢–û–ü-5 —Ä–µ–¥–∫–∏—Ö NFT* –∑–∞ —ç—Ç—É —Ü–µ–Ω—É. "
                           f"–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä *—Ä–µ–¥–∫–æ—Å—Ç—å* –∏ —É–∑–Ω–∞–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É "
                           f"–ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º —Å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–æ–π –∂–µ —Ä–µ–¥–∫–æ—Å—Ç—å—é.",
                           parse_mode='Markdown')
    await FSMChoice.choice_category.set()  # –ë–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º FSM
    await bot.send_photo(chat_id=message.from_user.id,
                         photo='https://tonblockchain.ru/content/images/size/w600/2022/02/photo_2022-01-25_19-50-29.jpg')
    await bot.send_message(message.from_user.id,
                           f"""*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*""",
                           parse_mode='Markdown',
                           reply_markup=ikb_categories)


async def command_restart(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.from_user.id, f"Hi there {message.from_user.first_name}! üëã\n"
                                                 f"–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ ‚úå\n\n"
                                                 f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help",
                           parse_mode='Markdown', reply_markup=kb_client)
    await bot.send_message(message.from_user.id, text="–∏–ª–∏ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*",
                           parse_mode='Markdown', reply_markup=ikb_categories)
    await FSMChoice.choice_category.set()


@dp.callback_query_handler(text='choice_category', state="*")
async def choice_category(callback_q: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await FSMChoice.choice_category.set()
    await callback_q.message.answer(text="*–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*",
                                    parse_mode='Markdown', reply_markup=ikb_categories)
    await callback_q.answer(cache_time=4)


@dp.callback_query_handler(text=['—Åategory_trend', '—Åategory_popular'],
                           state=FSMChoice.choice_category)
async def user_category(callback_q: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['choice_category'] = callback_q.data
    await FSMChoice.next()
    if data['choice_category'] == '—Åategory_trend':
        await callback_q.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π:",
                                        parse_mode='Markdown', reply_markup=ikb_trend_collect)
    elif data['choice_category'] == '—Åategory_popular':
        await callback_q.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π:",
                                        parse_mode='Markdown', reply_markup=ikb_popular_collect)
    await callback_q.answer(cache_time=4)


@dp.callback_query_handler(text=ut.all_tables_name(), state=FSMChoice.tbl_collection)
async def choice_collection(callback_q: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['tbl_collection'] = callback_q.data
    await FSMChoice.next()
    await callback_q.message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ —Ä–µ–¥–∫–æ—Å—Ç—å:', reply_markup=ikb_result)
    await callback_q.answer(cache_time=4)


@dp.callback_query_handler(text=['price', 'rarity', 'target_rarity'],
                           state=FSMChoice.show_result)
async def show_result(callback_q: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['show_result'] = callback_q.data
    select_ = SelectResult()
    table = data['tbl_collection']
    min_price = select_.select_min_max_price(table=table)[0][0]
    max_price = select_.select_min_max_price(table=table)[0][1]
    count_subj = select_.select_min_max_price(table=table)[0][2]
    min_rarity = select_.select_max_min_rarity(table=table)[0][0]
    max_rarity = select_.select_max_min_rarity(table=table)[0][1]
    if count_subj in [None, 0, '0']:
        await callback_q.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å, "
                                        f"–∫–æ–≥–¥–∞ –æ–Ω–∏ —Å–æ–±–∏—Ä—É—Ç—Å—è ¬Ø\_(„ÉÑ)_/¬Ø...")
    else:
        if data['show_result'] == 'price':
            await callback_q.message.answer(f"_–í—Å–µ–≥–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {count_subj:,} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "
                                            f"—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –æ—Ç {min_price:,} –¥–æ {max_price:,} TON_.\n\n"
                                            f"*–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ TON:*",
                                            parse_mode='Markdown')
        elif data['show_result'] == 'rarity':
            await callback_q.message.answer(f"_–†–µ–¥–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {min_rarity:,} - {max_rarity:,}_\n\n"
                                            f"*–ù–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏:*",
                                            parse_mode='Markdown')
        elif data['show_result'] == 'target_rarity':
            await callback_q.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ *–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏* –∏ –ø–æ—Å–ª–µ ‚ùóÔ∏è"
                                            f"*–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤* –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                                            f"_(—Ä–µ–¥–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {min_rarity:,} - {max_rarity:,}, "
                                            f"–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –±–æ–ª—å—à–µ {count_subj:,})_",
                                            parse_mode='Markdown')
            await callback_q.message.answer(f"‚úÖ *–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:* _100 !15_", parse_mode='Markdown')

    await callback_q.answer(cache_time=4)


@dp.callback_query_handler(text='choice_collection', state=FSMChoice.show_result)
async def back_choice_coll(callback_q: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['choice_category'] == '—Åategory_trend':
            await callback_q.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π:",
                                            parse_mode='Markdown', reply_markup=ikb_trend_collect)
        elif data['choice_category'] == '—Åategory_popular':
            await callback_q.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π:",
                                            parse_mode='Markdown', reply_markup=ikb_popular_collect)
    await FSMChoice.tbl_collection.set()
    await callback_q.answer(cache_time=4)


async def handler_show_result(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            select_ = SelectResult()
            condition = data['show_result']
            table = data['tbl_collection']
            if condition == 'price':
                await message.reply(select_.get_top_5(client_message=message.text.replace(",", "."),
                                                      table=table,
                                                      condition=condition),
                                    parse_mode='HTML',
                                    reply_markup=ikb_result)
            elif condition == "rarity":
                await message.reply(select_.get_rarity_analytic(client_message=message.text.replace(",", "."),
                                                                table=table),
                                    parse_mode='HTML',
                                    reply_markup=ikb_result)
            elif condition == "target_rarity":
                try:
                    client_rarity = message.text.replace(",", ".").split('!')[0].strip()
                    dataset_count = float(message.text.replace(",", ".").split('!')[1].strip()) // 1
                    lower_limit = dataset_count // 2
                    upper_limit = dataset_count - lower_limit

                    await message.reply(select_.get_rarity_analytic(client_message=client_rarity,
                                                                    table=table, lower_limit=lower_limit,
                                                                    upper_limit=upper_limit),
                                        parse_mode='HTML',
                                        reply_markup=ikb_result)
                except:
                    await message.reply(f"üö´ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∫–æ—Å—Ç—å, –ø–æ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n\n"
                                        f"‚úÖ *–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:* _100 !15_",
                                        parse_mode='Markdown')
        except KeyError:
            await message.answer('‚ùó–ó–∞–±—ã–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É üëá', reply_markup=ikb_result)
        # await FSMChoice.show_result.set()


async def handler_to_all(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            if data['choice_category'] == '—Åategory_trend':
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π:',
                                     reply_markup=ikb_trend_collect)
            elif data['choice_category'] == '—Åategory_popular':
                await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π:",
                                     parse_mode='Markdown', reply_markup=ikb_popular_collect)
        except KeyError:
            await FSMChoice.choice_category.set()
            await message.answer('–ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ *–≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é* –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help.',
                                 parse_mode='Markdown',
                                 reply_markup=ikb_categories)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start_help, commands=['start', '—Å—Ç–∞—Ä—Ç', 'help'], state="*")
    dp.register_message_handler(command_restart, commands=['restart'], state="*")
    dp.register_message_handler(handler_show_result, content_types=['text'], state="*")
    dp.register_message_handler(handler_to_all, content_types=['text'], state="*")
