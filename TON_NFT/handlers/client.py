from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext  # –¥–ª—è –æ–±—ä—è–≤–ª.–∞–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
from aiogram.dispatcher.filters.state import State, StatesGroup
from import_mylib.create_bot import bot, dp
from postgres_db import diamonds_select as ds  # –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–±–æ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü
from keyboards.client_kb import kb_client, inl_kb_collection, inl_kb_choice


class FSMChoice(StatesGroup):
    tbl_collection = State()
    show_result = State()


#  First display? command '/start'
async def command_start(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.from_user.id,
                           f"Hi there {message.from_user.first_name}! üëã\n"
                           f"–ë–æ—Ç —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö, "
                           f"–∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É "
                           f"–Ω–∞ —Å–∞–π—Ç–µ [TON.Diamonds](http://ton.diamonds).\n"
                           f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ *TON* "
                           f"–∏ —É–≤–∏–¥–∏—Ç–µ *–¢–û–ü-5 —Ä–µ–¥–∫–∏—Ö NFT* –∑–∞ —ç—Ç—É —Ü–µ–Ω—É. "
                           f"–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä *—Ä–µ–¥–∫–æ—Å—Ç—å* –∏ —É–∑–Ω–∞–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º "
                           f"—Å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–æ–π –∂–µ —Ä–µ–¥–∫–æ—Å—Ç—å—é.",
                           parse_mode='Markdown')
    await FSMChoice.tbl_collection.set()  # –ë–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º FSM
    await bot.send_message(message.from_user.id,
                           f"""–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é:""",
                           reply_markup=inl_kb_collection)


async def command_restart(message: types.Message, state: FSMContext):
    await state.finish()
    await FSMChoice.tbl_collection.set()
    await bot.send_message(message.from_user.id, f"Hi there {message.from_user.first_name}! üëã\n"
                                                 f"–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ ‚úå",
                           reply_markup=inl_kb_collection)


async def command_help(message: types.Message, state: FSMContext):
    await state.finish()
    await FSMChoice.tbl_collection.set()
    await bot.send_message(message.from_user.id, "–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-5 —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π "
                                                 "–Ω–∞ —Å–∞–π—Ç–µ [TON.Diamonds](http://ton.diamonds) –∑–∞ —Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç—å, "
                                                 "–∫–æ—Ç–æ—Ä—É—é –≤—ã —É–∫–∞–∂–∏—Ç–µ.\n"
                                                 "–ï—â—ë –æ–Ω —É–º–µ–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º —Å —Ç–æ–π "
                                                 "—Ä–µ–¥–∫–æ—Å—Ç—å—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã –µ–º—É –Ω–∞–ø–∏—à–∏—Ç–µ.\n\n"
                                                 "*–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é* üëá",
                           parse_mode='Markdown',
                           reply_markup=inl_kb_collection)


# –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π state
async def command_state(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            if data['tbl_collection']:
                if data['show_result']:
                    await bot.send_message(message.from_user.id,
                                           f"–í—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è - {data['tbl_collection']}\n"
                                           f"–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ - {data['show_result']}")
                else:
                    await bot.send_message(message.from_user.id,
                                       f"–í—ã–±—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è - {data['tbl_collection']}")
    except KeyError:
        await bot.send_message(message.from_user.id,
                               f"–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è ¬Ø\_(„ÉÑ)_/¬Ø")


@dp.callback_query_handler(text='collection_choice', state="*")
async def choose_again(choose_again: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await FSMChoice.tbl_collection.set()
    await choose_again.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
                                      reply_markup=inl_kb_collection)
    await choose_again.answer()


@dp.callback_query_handler(text=['ton_diamonds', 'annihilation', 'g_bot_sd',
                                 'stickerface_wearables', 'calligrafuturism_24_units'],
                           state=FSMChoice.tbl_collection)
async def choice_collection(collection: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['tbl_collection'] = collection.data
    await FSMChoice.next()
    await collection.message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ —Ä–µ–¥–∫–æ—Å—Ç—å:', reply_markup=inl_kb_choice)
    await collection.answer()

@dp.callback_query_handler(text=['current_price', 'rarity'], state=FSMChoice.show_result)
async def choice_result(choice: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['show_result'] = choice.data
    table = data['tbl_collection']
    min_price = ds.select_min_max_price(table)[0][0]
    max_price = ds.select_min_max_price(table)[0][1]
    count = ds.select_min_max_price(table)[0][2]
    min_rarity = ds.select_max_min_rarity(table)[0][0]
    max_rarity = ds.select_max_min_rarity(table)[0][1]
    if data['show_result'] == 'current_price':
        await choice.message.answer(f"_–í—Å–µ–≥–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "
                                    f"—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –æ—Ç {min_price:,} –¥–æ {max_price:,} TON_.\n\n"
                                    f"*–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ TON:*",
                                    parse_mode='Markdown')
    elif data['show_result'] == 'rarity':
        await choice.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ *–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏* –∏ –ø–æ—Å–ª–µ ‚ùóÔ∏è"
                                    f"*–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤* –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                                    f"_(—Ä–µ–¥–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {min_rarity:,} - {max_rarity:,}, "
                                    f"–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –±–æ–ª—å—à–µ {count:,})_",
                                    parse_mode='Markdown')
        await choice.message.answer(f"‚úÖ *–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:* _100 !15_", parse_mode='Markdown')
    await choice.answer()

# @dp.message_handler(content_types=['text'])
async def handler_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            condition = data['show_result']
            table = data['tbl_collection']
            if condition == 'current_price':
                await message.reply(ds.get_select_result_top_5(client_message=message.text,
                                                               table=table,
                                                               condition=condition),
                                    parse_mode='HTML',
                                    reply_markup=inl_kb_choice)
            if condition == 'rarity':
                # if len(message.text.split(',')) < 2:
                try:
                    client_rarity = message.text.replace(",", ".").split('!')[0].strip()
                    dataset_count = float(message.text.replace(",", ".").split('!')[1].strip()) // 1
                    lower_limit = dataset_count // 2
                    upper_limit = dataset_count - lower_limit
                    await message.reply(ds.get_select_result_rarity(client_message=client_rarity,
                                                                    table=table, lower_limit=lower_limit,
                                                                    upper_limit=upper_limit),
                                        parse_mode='HTML',
                                        reply_markup=inl_kb_choice)
                except:
                    await message.reply("‚ùóÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∫–æ—Å—Ç—å, –ø–æ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n\n"
                                        "‚úÖ *–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:* _100 !15_", parse_mode='Markdown')
        except KeyError:
            await message.answer('‚ùó–ó–∞–±—ã–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É üëá', reply_markup=inl_kb_choice)
        await FSMChoice.show_result.set()
        # print(condition, table, message.text)
        # await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ —Ä–µ–¥–∫–æ—Å—Ç—å:', reply_markup=inl_kb_choice)

async def handler_to_all(message: types.Message):
    await message.answer('–ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help.',
                         reply_markup=kb_client)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', '—Å—Ç–∞—Ä—Ç'], state="*")
    dp.register_message_handler(command_restart, commands=['restart'], state="*")
    dp.register_message_handler(command_help, commands=['help', '–ø–æ–º–æ—â—å'], state="*")
    dp.register_message_handler(command_state, commands=['state'], state="*")
    dp.register_message_handler(handler_text, content_types=['text'], state=FSMChoice.show_result)
    dp.register_message_handler(handler_to_all, content_types=['text'], state="*")
