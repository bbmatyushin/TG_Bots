from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from data_files.create_bot import bot, dp
from database.sqlite_select import SelectQuerySpread, SelectQueryPump
from data_files.useful_tools import UsefulTools
from keyboards.client_kb import kb_restart, ikb_choice, ikb_zazam


class FSMChoice(StatesGroup):
    choice_pump = State()
    choice_spread = State()
    zazam_spread = State()


@dp.message_handler(lambda msg: msg.text in ["–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"],
                    content_types=["text"], state="*")
async def command_restart(message: types.Message, state: FSMContext):
    await message.delete()
    await state.finish()
    await message.answer(text="–ü—à—à.. –ø—à—à—à... –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏! ü´°\n\n"
                              "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                         reply_markup=ikb_choice)


@dp.callback_query_handler(text=["pump"], state="*")
async def pump_message(callback: types.CallbackQuery):
    await FSMChoice.choice_pump.set()
    await callback.message.answer(text="–ñ–¥—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ pump'–æ–≤...",
                                  reply_markup=kb_restart)
    await callback.answer()


@dp.callback_query_handler(text=["spread"], state="*")
async def spread_message(callback: types.CallbackQuery):
    await FSMChoice.choice_spread.set()
    await callback.message.answer(text="–ñ–¥—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø—Ä–µ–¥–∞...",
                                  reply_markup=kb_restart)
    await callback.answer()


@dp.callback_query_handler(text=["neo_spread"], state="*")
async def spread_zazam(callback: types.CallbackQuery):
    await FSMChoice.zazam_spread.set()
    query_spread = SelectQuerySpread()
    output_result = query_spread.select_output_zazam()  #TODO: –ü–µ—Ä–µ–¥–∞—Ç—å –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∏ % —Å–ø—Ä–µ–¥–∞
    part = len(output_result) // 4  # —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ 4096 —Å–∏–º–≤, –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –¥—Ä–æ–±–∏—Ç—å
    res1 = output_result[:part]
    res2 = output_result[part:part + part]
    res3 = output_result[part + part:part + part + part]
    res4 = output_result[part + part + part:]
    await callback.message.answer(text="".join(res1), parse_mode='HTML')
    await callback.message.answer(text="".join(res2), parse_mode='HTML')
    await callback.message.answer(text="".join(res3), parse_mode='HTML')
    if not res4:
        await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é:",
                                      reply_markup=ikb_choice)
    else:
        await callback.message.answer(text="".join(res4), parse_mode='HTML')
        await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é:",
                                      reply_markup=ikb_choice)


@dp.message_handler(lambda msg: msg.text.lower().startswith('my'), content_types=['text'],
                    state=FSMChoice.choice_pump)
async def get_my_best_change(message: types.Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å my, –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        1 –∑–Ω–∞—á–µ–Ω–∏–µ - rank_min, 2 - rank_max"""
    data = message.text.lower().replace("my", "")
    split_text = data.strip().split()
    sq_pump = SelectQueryPump()
    if len(split_text) == 2:
        await message.answer(sq_pump.best_change_output_to_me(rank_max=split_text[0],
                                                        rank_min=split_text[1]),
                             parse_mode='Markdown')
    elif len(split_text) == 1:
        await message.answer(sq_pump.best_change_output_to_me(rank_min=split_text[0]),
                             parse_mode='Markdown')
    elif not split_text:
        await message.answer(sq_pump.best_change_output_to_me(),
                             parse_mode='Markdown')
    else:
        await message.reply(text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö *¬Ø\_(„ÉÑ)_/¬Ø*",
                            parse_mode='Markdown')
    await message.answer(text="–ñ–¥—É –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n"
                              "–∏–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é:",
                         reply_markup=ikb_choice)


@dp.message_handler(content_types=["text"], state=FSMChoice.choice_pump)
async def get_best_change(message: types.Message):
    """–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥–∞—Ç—å
    1 –∑–Ω–∞—á–µ–Ω–∏–µ - rank_max, 2 - rank_min, 3 - limit"""
    split_text = message.text.split()
    sq_pump = SelectQueryPump()
    if len(split_text) == 3:
        await message.answer(sq_pump.best_change_output(rank_max=split_text[0],
                                                        rank_min=split_text[1],
                                                        limit=split_text[2]),
                             parse_mode='Markdown')
    elif len(split_text) == 2:
        await message.answer(sq_pump.best_change_output(rank_max=split_text[0],
                                                   rank_min=split_text[1]),
                             parse_mode='Markdown')
    elif len(split_text) == 1:
        await message.answer(sq_pump.best_change_output(rank_min=split_text[0]),
                             parse_mode='Markdown')
    else:
        await message.reply(text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö *¬Ø\_(„ÉÑ)_/¬Ø*",
                            parse_mode='Markdown')
    await message.answer(text="–ñ–¥—É –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n"
                              "–∏–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é:",
                         reply_markup=ikb_choice)


@dp.message_handler(content_types=['text'], state=FSMChoice.choice_spread)
async def answer_all_messages(message: types.Message):
    symbol = message.text.split()[0]
    currency_list = list(UsefulTools().get_currency_list().keys())
    if symbol.upper() in currency_list:
        sq_spread = SelectQuerySpread()
        if len(message.text.split()) > 1:
            volume = message.text.split()[1]
            if volume.isdigit():
                await message.reply(sq_spread.spread_output(table=symbol, symbol=symbol,
                                                            volume=float(volume)),
                                    parse_mode='HTML')
        elif len(message.text.split()) == 1:
            await message.reply(sq_spread.spread_output(table=symbol, symbol=symbol),
                                parse_mode='HTML')
    else:
        await message.answer(f"–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å *—Ç–∏–∫–µ—Ä —Ç–æ–∫–µ–Ω–∞*, —á—Ç–æ–±—ã –ë–æ—Ç –≤—ã–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –µ–≥–æ "
                             "—Å–ø—Ä–µ–¥—É –Ω–∞ –±–∏—Ä–∂–∞—Ö.",
                             parse_mode='Markdown')
    await message.answer(text="–ñ–¥—É –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n"
                              "–∏–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é:",
                         reply_markup=ikb_choice)


@dp.message_handler(content_types=["text"], state="*")
async def restart(message: types.Message, state: FSMContext):
    await state.finish()
    await message.delete()
    await bot.send_message(chat_id=message.from_user.id,
                           text=f"Hi, {message.from_user.username}! üëã\n\n"
                                f"*–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:*",
                           parse_mode='Markdown',
                           reply_markup=ikb_choice)



